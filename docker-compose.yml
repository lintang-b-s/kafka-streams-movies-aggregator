version: "3.8"

networks:
  movie-streams:
    name: movie-streams
    driver: bridge

services:

#  movie-service:
#    container_name: movie-service
#    build: ./movie-service
#    ports:
#      - 8200:8200
#
#  streams-app:
#    container_name:  streams-app
#    build: ./movie-streams
#    ports:
#      - 8300:8300




  pg-admin:
    image: dpage/pgadmin4
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@email.com
      - PGADMIN_DEFAULT_PASSWORD=admin
      - PGADMIN_LISTEN_PORT=5050
    ports:
      - 5050:5050
    depends_on:
      - postgres-movie
    networks:
      - movie-streams

  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - movie-streams

  postgres-movie:
    container_name: postgres-movie
    image: debezium/postgres:14-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: netflik
      POSTGRES_USER: netflik
      POSTGRES_PASSWORD: netflik
    ports:
      - 5432:5432
    volumes:
      - postgres-movie:/var/lib/postgresql/data
      - ./config/init.sql:/docker-entrypoint-initdb.d/create_tables.sql
    command:
      - "postgres"
      - "-c"
      - "wal_level=logical"
    networks:
      - movie-streams


  #    postgres-movie:
#    container_name: postgres-movie
#    image: postgres:14
#    restart: unless-stopped
#    environment:
#      POSTGRES_DB: netflik
#      POSTGRES_USER: netflik
#      POSTGRES_PASSWORD: netflik
#    ports:
#      - 5432:5432
#    volumes:
#      - postgres-movie:/var/lib/postgresql/data
#      - ./config/init.sql:/docker-entrypoint-initdb.d/create_tables.sql



  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.9.0
    container_name: elasticsearch
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    ports:
      - 9200:9200
    environment:
      - cluster-name=elastic-cluster
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - node.name=elasticsearch
      - cluster.initial_master_nodes=elasticsearch-01,elasticsearch
      - discovery.seed_hosts=elasticsearch-01
    ulimits:
      memlock:
        soft: -1
        hard: -1
    networks:
      - movie-streams


  elasticsearch-01:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.9.0
    container_name: elasticsearch-01
    volumes:
      - elasticsearch-data-01:/usr/share/elasticsearch/data

    environment:
      - cluster-name=elastic-cluster
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - node.name=elasticsearch-01
      - cluster.initial_master_nodes=elasticsearch-01,elasticsearch
      - discovery.seed_hosts=elasticsearch
    ulimits:
      memlock:
        soft: -1
        hard: -1
    networks:
      - movie-streams


  zookeeper:
    image: confluentinc/cp-zookeeper:7.2.6
    container_name: zookeeper
    restart: unless-stopped
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    healthcheck:
      test: "echo stat | nc localhost $$ZOOKEEPER_CLIENT_PORT"
    networks:
      - movie-streams

  kafka:
    image: confluentinc/cp-kafka:7.2.6
    container_name: kafka
    restart: unless-stopped
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "9092" ]
    networks:
      - movie-streams

  schema-registry:
    image: confluentinc/cp-schema-registry:7.2.6
    container_name: schema-registry
    restart: unless-stopped
    depends_on:
      - kafka
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: kafka:9092
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
    healthcheck:
      test: "curl -f http://localhost:8081 || exit 1"
    networks:
      - movie-streams

  schema-registry-ui:
    image: landoop/schema-registry-ui:latest
    container_name: kafka-schema-registry-ui
    restart: unless-stopped
    depends_on:
      - schema-registry
    ports:
      - "8001:8000"
    environment:
      SCHEMAREGISTRY_URL: http://schema-registry:8081
      PROXY: "true"
    healthcheck:
      test: "wget --quiet --tries=1 --spider http://localhost:8000 || exit 1"
    networks:
      - movie-streams

  kafka-rest-proxy:
    image: confluentinc/cp-kafka-rest:7.2.6
    container_name: kafka-rest-proxy
    restart: unless-stopped
    depends_on:
      - zookeeper
      - kafka
    ports:
      - "8082:8082"
    environment:
      KAFKA_REST_BOOTSTRAP_SERVERS: PLAINTEXT://kafka:9092
      KAFKA_REST_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_REST_HOST_NAME: kafka-rest-proxy
      KAFKA_REST_LISTENERS: http://0.0.0.0:8082
      KAFKA_REST_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      KAFKA_REST_CONSUMER_REQUEST_TIMEOUT_MS: 30000
    healthcheck:
      test: "curl -f http://localhost:8082 || exit 1"
    networks:
      - movie-streams

  kafka-connect:
    build: docker/kafka-connect
    container_name: kafka-connect
    restart: unless-stopped
    depends_on:
      - schema-registry
    ports:
      - "8083:8083"
    environment:
      CONNECT_BOOTSTRAP_SERVERS: kafka:9092
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: compose-connect-group
      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
      CONNECT_OFFSET_STORAGE_PARTITIONS: 3
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
      CONNECT_STATUS_STORAGE_PARTITIONS: 3
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
#      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
#      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
#      CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
#      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CONNECT_KEY_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CONNECT_INTERNAL_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_INTERNAL_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_REST_ADVERTISED_HOST_NAME: kafka-connect
      CONNECT_LOG4J_ROOT_LOGLEVEL: INFO
      CONNECT_LOG4J_LOGGERS: "org.apache.kafka.connect.runtime.rest=WARN,org.reflections=ERROR"
      CONNECT_PLUGIN_PATH: "/usr/share/java"
    healthcheck:
      test: "curl -f http://localhost:$$CONNECT_REST_PORT || exit 1"
    networks:
      - movie-streams


#  kafka-connect-ui:
#    image: landoop/kafka-connect-ui:0.9.7
#    container_name: kafka-connect-ui
#    restart: unless-stopped
#    depends_on:
#      - kafka-connect
#    ports:
#      - "8086:8000"
#    environment:
#      CONNECT_URL: http://kafka-connect:8083
#      PROXY: "true"
#    healthcheck:
#      test: "wget --quiet --tries=1 --spider http://localhost:8000 || exit 1"


  kafdrop:
    image: obsidiandynamics/kafdrop
    container_name: kafdrop
    restart: "no"
    ports:
      - "9001:9000"
    environment:
      KAFKA_BROKERCONNECT: "kafka:9092"
      JVM_OPTS: "-Xms16M -Xmx48M -Xss180K -XX:-TieredCompilation -XX:+UseStringDeduplication -noverify"
      CMD_ARGS: "--message.format=AVRO --schemaregistry.connect=http://schema-registry:8081"
    depends_on:
      - kafka
    networks:
      - movie-streams



volumes:
  postgres-movie:
    driver: local
  elasticsearch-data:
    driver: local
  elasticsearch-data-01:
    driver: local
